#!/bin/bash
ME=`basename $0`
HOST=0
DEVICE=0
PARAMS=""
WORKING_DIR=$(pwd)


# Parse the remote path given into a host and device.
function parseRemote {
  arr=(${1//:/ })
  HOST=${arr[0]}
  DEVICE=${arr[1]}

  # Put the device into the params for the remote.
  PARAMS="$PARAMS -P $DEVICE"
}


function parseMemoryOperation {
  # Split memory operation into array
  arr=(${1//:/ })
  length=${#arr[@]}

  # Determine type of operation
  case ${arr[1]} in
    r) MEM_OP_TYPE=0 ;;
    v) MEM_OP_TYPE=1 ;;
    w) MEM_OP_TYPE=2 ;;
  esac

  # Path to local file
  FILE_PATH=${arr[2]}

  # Just use the base filename on remote
  BASE_FILENAME="${FILE_PATH##*/}"
  arr[$length-1]=$BASE_FILENAME

  # Rejoin array and add to params
  SAVE_IFS=$IFS
  IFS=":"
  REMOTE_MEMORY_OPERATION="${arr[*]}"
  IFS=$SAVE_IFS
  PARAMS="$PARAMS -U $REMOTE_MEMORY_OPERATION"
}

function connect {
  printf "\\n[$ME] Connecting to remote host...\\n"
  ssh -NfM -o 'ControlPath=~/.ssh/%r@%h:%p.conn' $HOST
}

function disconnect {
  printf "[$ME] Disconnecting from remote host..."
  ssh -o 'ControlPath=~/.ssh/%r@%h:%p.conn' -O exit $HOST
  echo
}

function copyToRemote {
  printf "\\n[$ME] Copying file to remote host...\\n"
  scp -o 'ControlPath=~/.ssh/%r@%h:%p.conn' $FILE_PATH $HOST:~
}

function execute {
  ssh -o 'ControlPath=~/.ssh/%r@%h:%p.conn' $HOST \
    "avrdude $PARAMS"
}

function resetBaud {
  ssh -o 'ControlPath=~/.ssh/%r@%h:%p.conn' $HOST \
    "stty -F $DEVICE 1200"
  sleep 1
}

function copyFromRemote {
  printf "\\n[$ME] Copying file from remote host...\\n"
  scp -o 'ControlPath=~/.ssh/%r@%h:%p.conn' $HOST:~/$BASE_FILENAME $FILE_PATH 
}

function delete {
  printf "[$ME] Deleting file from remote host..."
  ssh -o 'ControlPath=~/.ssh/%r@%h:%p.conn' $HOST \
    "rm ~/$BASE_FILENAME"
  echo 'Done'
}


# Parse the parameters
for i in "$@"; do
  case $i in
    -P) REMOTE_PATH=1; continue ;;
    -U) MEMORY_OPERATION=1; continue
  esac

  if [[ $REMOTE_PATH -eq 1 ]]; then
    parseRemote $i
    REMOTE_PATH=0
    continue
  fi

  if [[ $MEMORY_OPERATION -eq 1 ]]; then
    parseMemoryOperation $i
    MEMORY_OPERATION=0
    continue
  fi

  PARAMS="$PARAMS $i"
done

connect
resetBaud

if [[ $MEM_OP_TYPE -eq 0 ]]; then
  printf "\\n[$ME] Reading from board..."
  execute
  copyFromRemote
  delete
fi

if [[ $MEM_OP_TYPE -eq 1 ]]; then
  copyToRemote
  printf "\\n[$ME] Verifying..."
  execute
  delete
fi

if [[ $MEM_OP_TYPE -eq 2 ]]; then
  copyToRemote
  printf "\\n[$ME] Uploading to board..."
  execute
  delete
fi

disconnect
