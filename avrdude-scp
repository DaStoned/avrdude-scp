#!/bin/bash
ME=`basename $0`
HOST=0
DEVICE=0
PARAMS=""
WORKING_DIR=$(pwd)


# Parse the remote path given into a host and device.
function parseRemote {
  arr=(${1//:/ })
  HOST=${arr[0]}
  DEVICE=${arr[1]}

  # Put the device into the params for the remote.
  PARAMS="$PARAMS -P $DEVICE"
}


# Get the local path of the hex file to be written.
function parseMemoryOperation {
  arr=(${1//:/ })
  length=${#arr[@]}

  # Local path to the file.
  FILE_PATH=${arr[$length-1]}

  # Replace the local path with just the filename for after scp.
  BASE_FILENAME="${FILE_PATH##*/}"
  arr[$length-1]=$BASE_FILENAME

  # Rejoin the array.
  SAVE_IFS=$IFS
  IFS=":"
  REMOTE_MEMORY_OPERATION="${arr[*]}"
  IFS=$SAVE_IFS

  # Add it to the params.
  PARAMS="$PARAMS -U $REMOTE_MEMORY_OPERATION"
}


# Parse the parameters.
for i in "$@"; do

  # Catch and handle the parameters we need to exclude/modify for the remote.
  case $i in
    -P) REMOTE_PATH=1; continue ;;
    -U) MEMORY_OPERATION=1; continue
  esac
  if [[ $REMOTE_PATH -eq 1 ]]; then
    parseRemote $i
    REMOTE_PATH=0
    continue
  fi
  if [[ $MEMORY_OPERATION -eq 1 ]]; then
    parseMemoryOperation $i
    MEMORY_OPERATION=0
    continue
  fi

  PARAMS="$PARAMS $i"
done


# TODO: Check for all parameters and display usage.


# Connect to the remote host.
printf "\\n[$ME] Connecting to remote host...\\n"
ssh -NfM -o 'ControlPath=~/.ssh/%r@%h:%p.conn' $HOST

# Copy the hex file.
printf "\\n[$ME] Copying file to remote host...\\n"
scp -o 'ControlPath=~/.ssh/%r@%h:%p.conn' $FILE_PATH $HOST:~

# Upload to the board.
printf "\\n[$ME] Uploading to board..."
ssh -o 'ControlPath=~/.ssh/%r@%h:%p.conn' $HOST \
  "avrdude $PARAMS"

# Delete the file from the remote host.
printf "[$ME] Deleting file from remote host..."
ssh -o 'ControlPath=~/.ssh/%r@%h:%p.conn' $HOST "rm ~/$BASE_FILENAME"
echo 'Done'

# Disconnect from the remote host.
printf "[$ME] Disconnecting from remote host..."
ssh -o 'ControlPath=~/.ssh/%r@%h:%p.conn' -O exit $HOST
echo
